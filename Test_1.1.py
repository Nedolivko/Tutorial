import random

def test1(): #Добавьте в класс LinkedList метод удаления одного узла по его значению delete(val, all=False),где флажок all=False по умолчанию -- удаляем только первый нашедшийся элемент
    print('------Удаление элемента из списка, состоящего из нескольких элементов---------')
    s_list = LinkedList()
    for i in range(random.randint(1, 5), random.randint(5, 20)):
        s_list.add_in_tail(Node(i))
    s_list.print_all_nodes()
    print('-----------------')
    print('HEAD', s_list.head.value, 'TAIL', s_list.tail.value)
    print('-----------------')
    s_list.delete(random.randint(5, 20))
    s_list.print_all_nodes()
    print('-----------------')
    print('HEAD', s_list.head.value, 'TAIL', s_list.tail.value)

    print('---------Удаление элемента из списка, состоящего из одного элемента------------')
    s_list = LinkedList()
    print('HEAD', s_list.head, 'TAIL', s_list.tail)
    s_list.add_in_tail(Node(1))
    print('HEAD', s_list.head.value, 'TAIL', s_list.tail.value)
    s_list.delete(1)
    s_list.print_all_nodes()
    print('-----------------')
    print('HEAD', s_list.head, 'TAIL', s_list.tail)

    print('-------Удаление элемента, стоящего на последнем месте, из списка-----------------')
    s_list = LinkedList()
    for i in range(1, 5):
        s_list.add_in_tail(Node(i))
    s_list.print_all_nodes()
    print('HEAD', s_list.head.value, 'TAIL', s_list.tail.value)
    print('-----------------')
    s_list.delete(4)
    s_list.print_all_nodes()
    print('HEAD', s_list.head.value, 'TAIL', s_list.tail.value)

def test2(): #Дополните этот метод удалением всех узлов по конкретному значению (флажок all=True)
    print('------Удаление элемента из списка, состоящего из нескольких элементов---------')
    s_list = LinkedList()
    for i in range(1, 10):
        s_list.add_in_tail(Node(random.randint(1, 5)))
    s_list.print_all_nodes()
    print('-----------------')
    print('HEAD', s_list.head.value, 'TAIL', s_list.tail.value)
    print('-----------------')
    s_list.delete(random.randint(1, 5), True)
    s_list.print_all_nodes()
    print('-----------------')
    print('HEAD', s_list.head.value, 'TAIL', s_list.tail.value)

    print('-------Удаление элементов, стоящих на последнем месте, из списка-----------------')
    s_list = LinkedList()
    s_list.add_in_tail(Node(2))
    s_list.add_in_tail(Node(1))
    s_list.add_in_tail(Node(1))
    s_list.add_in_tail(Node(1))
    s_list.print_all_nodes()
    print('HEAD', s_list.head.value, 'TAIL', s_list.tail.value)
    print('-----------------')
    s_list.delete(1, True)
    s_list.print_all_nodes()
    print('HEAD', s_list.head.value, 'TAIL', s_list.tail.value)

    print('-------Удаление элемента, из которого состоит весь список-----------------')
    s_list = LinkedList()
    s_list.add_in_tail(Node(1))
    s_list.add_in_tail(Node(1))
    s_list.add_in_tail(Node(1))
    s_list.add_in_tail(Node(1))
    s_list.print_all_nodes()
    print('HEAD', s_list.head.value, 'TAIL', s_list.tail.value)
    print('-----------------')
    s_list.delete(1, True)
    s_list.print_all_nodes()
    print('HEAD', s_list.head, 'TAIL', s_list.tail)

def test3(): #Добавьте в класс LinkedList метод очистки всего содержимого (создание пустого списка) -- clean()
    print('-------Очистка всего содержимого-----------------')
    s_list = LinkedList()
    for i in range(random.randint(1, 20)):
        s_list.add_in_tail(Node(random.randint(1, 20)))
    s_list.print_all_nodes()
    print('HEAD', s_list.head.value, 'TAIL', s_list.tail.value)
    s_list.clean()
    print('HEAD', s_list.head, 'TAIL', s_list.tail)

def test4(): #Добавьте в класс LinkedList метод поиска всех узлов по конкретному значению (возвращается стандартный питоновский список найденных узлов) find_all(val)
    s_list = LinkedList()
    for i in range(random.randint(1, 20)):
        s_list.add_in_tail(Node(random.randint(1, 5)))
    s_list.print_all_nodes()
    s = s_list.find_all(random.randint(1, 5))
    print('-----------------')
    for i in range(0, len(s)):
        print(s[i].value)

def test5(): #Добавьте в класс LinkedList метод вычисления текущей длины списка -- len()
    s_list = LinkedList()
    if s_list.len() == 0:
        print('Верно')
    s_list.add_in_tail(Node(1))
    if s_list.len() == 1:
        print('Верно')
    s_list.add_in_tail(Node(1))
    s_list.add_in_tail(Node(1))
    if s_list.len() == 3:
        print('Верно')

def test6(): # Добавьте в класс LinkedList метод вставки узла newNode после заданного узла afterNode (из списка) insert(afterNode, newNode). Если afterNode = None и список пустой, добавьте новый элемент первым в списке.
    print('-------Вставка в пустой список-----------------')
    s_list = LinkedList()
    print('HEAD', s_list.head, 'TAIL', s_list.tail)
    s_list.insert(0, 3587)
    s_list.print_all_nodes()
    print('HEAD', s_list.head.value, 'TAIL', s_list.tail.value)

    print('-------Вставка в начало списка-----------------')
    s_list = LinkedList()
    for i in range(1, 5):
        s_list.add_in_tail(Node(random.randint(1, 5)))
    s_list.print_all_nodes()
    print('HEAD', s_list.head.value, 'TAIL', s_list.tail.value)
    print('-----------------')
    s_list.insert(0, 3587)
    s_list.print_all_nodes()
    print('HEAD', s_list.head.value, 'TAIL', s_list.tail.value)

    print('-------Вставка в середину списка-----------------')
    s_list = LinkedList()
    for i in range(1, 6):
        s_list.add_in_tail(Node(random.randint(1, 5)))
    s_list.print_all_nodes()
    print('HEAD', s_list.head.value, 'TAIL', s_list.tail.value)
    print('-----------------')
    s_list.insert(2, 3587)
    s_list.print_all_nodes()
    print('HEAD', s_list.head.value, 'TAIL', s_list.tail.value)

    print('-------Вставка в конец списка-----------------')
    s_list = LinkedList()
    for i in range(1, 5):
        s_list.add_in_tail(Node(random.randint(1, 5)))
    s_list.print_all_nodes()
    print('HEAD', s_list.head.value, 'TAIL', s_list.tail.value)
    print('-----------------')
    s_list.insert(4, 3587)
    s_list.print_all_nodes()
    print('HEAD', s_list.head.value, 'TAIL', s_list.tail.value)
